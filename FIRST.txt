FIRST Sets for Modula-2 R10 Bootstrap Kernel

compilationUnit =
  { DEFINITION,
    IMPLEMENTATION,
    MODULE };
  
definitionModule =
  { DEFINITION };
  
import =
  { IMPORT };
  
definition =
  { CONST,
    TYPE,
    VAR,
    PROCEDURE,
    TO };
  
constDefinition =
  { LeftBracket,
    StdIdent };
  
ident =
  { StdIdent };
  
typeDefinition =
  { StdIdent };
  
aliasType =
  { ALIAS };
  
qualident =
  { StdIdent };
  
subrangeType =
  { LeftBracket };
  
range =
  { LeftBracket };
  
enumType =
  { LeftParen };
  
identList =
  { StdIdent };
  
setType =
  { SET };
  
arrayType =
  { ARRAY };
  
recordType =
  { RECORD };
  
fieldList =
  { StdIdent };
  
recTypeToExtend =
  { StdIdent,
    NIL };
  
pointerType =
  { POINTER };
  
procedureType =
  { PROCEDURE };
  
formalType =
  { ARGLIST
    ARRAY,
    CAST,
    CONST,
    StdIdent,
    VAR };
  
nonAttrFormalType =
  { ARGLIST
    ARRAY,
    CAST,
    StdIdent };
  
simpleFormalType =
  { ARRAY,
    StdIdent };
  
castingFormalType =
  { CAST };
  
variadicFormalType =
  { ARGLIST };
  
procedureHeader =
  { PROCEDURE };
  
bindingSpecifier =
  { NEW,
    RETAIN,
    RELEASE,
    READ,
    WRITE,
    StdIdent,
    Primitive };
  
bindableIdent =
  { StdIdent,
    Primitive };
  
procedureSignature =
  { StdIdent };
  
formalParams =
  { CONST,
    VAR,
    StdIdent };
  
programModule =
  { MODULE };
  
privateImport =
  { IMPORT };
  
block =
  { ALIAS,
    CONST,
    TYPE,
    VAR,
    PROCEDURE,
    TO,
    BEGIN };
  
implementationModule =
  { IMPLEMENTATION };
  
possiblyEmptyBlock =
  { ALIAS,
    CONST,
    TYPE,
    VAR,
    PROCEDURE,
    TO,
    BEGIN,
    END };
  
declaration =
  { ALIAS,
    CONST,
    TYPE,
    VAR,
    PROCEDURE,
    TO };
  
aliasDeclaration =
  { StdIdent,
    Asterisk };
  
namedAliasDecl =
  { StdIdent };
  
qualifiedWildcard =
  { StdIdent };
  
wildcardAliasDecl =
  { Asterisk };
  
typeDeclaration =
  { StdIdent };
  
pointerOrIndeterminateType =
  { POINTER };
  
indeterminateTarget =
  { RECORD };
  
indeterminateField =
  { Plus };
  
varDeclaration =
  { StdIdent };
    
statementSequence =
  { NEW,
    RETAIN,
    RELEASE,
    StdIdent,
    COPY,
    READ,
    WRITE,
    IF,
    CASE,
    LOOP,
    WHILE,
    REPEAT,
    FOR,
    RETURN,
    EXIT,
    NOP,
    TO };
  
statement =
  { NEW,
    RETAIN,
    RELEASE,
    StdIdent,
    COPY,
    READ,
    WRITE,
    IF,
    CASE,
    LOOP,
    WHILE,
    REPEAT,
    FOR,
    RETURN,
    EXIT,
    NOP,
    TO };
  
memMgtOperation =
  { NEW,
    RETAIN,
    RELEASE };
  
updateOrProcCall =
  { StdIdent };
  
returnStatement =
  { RETURN };
  
copyStatement =
  { COPY };
  
readStatement =
  { READ };
  
writeStatement =
  { WRITE };
  
inputArg =
  { NEW,
    StdIdent };
  
outputArgs =
  { Octothorpe,
    Minus,
    NOT,
    NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen };
  
ifStatement =
  { IF };

caseStatement =
  { CASE };
  
case =
  { NOT,
    NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen,
    Minus };
  
caseLabels =
  { NOT,
    NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen,
    Minus };
  
loopStatement =
  { LOOP };

whileStatement =
  { WHILE };

repeatStatement =
  { REPEAT };

forStatement =
  { FOR };
  
forLoopVariants =
  { StdIdent };
  
iterableExpr =
  { LeftBracket,
    StdIdent };
  
ordinalRange =
  { LeftBracket };
  
designator =
  { StdIdent };
  
designatorTail =
  { LeftBracket,
    Period,
    Caret };
  
subscriptOrSlice =
  { LeftBracket };
  
targetDesignator =
  { StdIdent };
  
targetDesignatorTail =
  { LeftBracket,
    Period,
    Caret };
 
fieldSelector =
  { Period };
    
expressionList =
  { Minus,
    NOT,
    NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen };
  
expression =
  { Minus,
    NOT,
    NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen };
  
simpleExpression =
  { Minus,
    NOT,
    NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen };
  
term =
  { NOT,
    NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen };
  
simpleTerm =
  { NOT,
    NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen };
  
factor =
  { NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen };
  
simpleFactor =
  { NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen };
  
designatorOrFuncCall =
  { StdIdent };
  
structuredValue =
  { LeftBrace };
  
valueComponent =
  { Minus,
    NOT,
    NumberLiteral,
    StringLiteral,
    LeftBrace,
    StdIdent,
    LeftParen };
  
toDoList =
  { TO };
  
trackingRef =
  { LeftParen };
  
taskToDo =
  { StringLiteral };
  
END OF FILE
