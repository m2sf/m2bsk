(*!m2pim*) (* Copyright (c) 2015 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE Token;

(* Token Definitions for Modula-2 R10 Bootstrap Kernel *)


(* All Tokens *)

TYPE Token =
  ( Invalid,         (* 0 *)
  
  (* Reserved Words *)
    Alias,           (* 1 *)
    And,             (* 2 *)   (* operator *)
    Arglist,         (* 3 *)
    Array,           (* 4 *)
    Begin,           (* 5 *)
    Case,            (* 6 *)
    Const,           (* 7 *)
    Copy,            (* 8 *)
    Definition,      (* 9 *)
    Div,            (* 10 *)   (* operator *)
    Do,             (* 11 *)
    Else,           (* 12 *)
    Elsif,          (* 13 *)
    End,            (* 14 *)
    Exit,           (* 15 *)
    For,            (* 16 *)
    If,             (* 17 *)
    Implementation, (* 18 *)
    Import,         (* 19 *)
    In,             (* 20 *)   (* operator *)
    Loop,           (* 21 *)
    Mod,            (* 22 *)   (* operator *)
    Module,         (* 23 *)
    New,            (* 24 *)
    Nop,            (* 25 *)
    Not,            (* 26 *)   (* operator *)
    Octetseq,       (* 27 *)
    Of,             (* 28 *)
    Opaque,         (* 29 *)
    Or,             (* 30 *)   (* operator *)
    Pointer,        (* 31 *)
    Procedure,      (* 32 *)
    Read,           (* 33 *)
    Record,         (* 34 *)
    Release,        (* 35 *)
    Repeat,         (* 36 *)
    Retain,         (* 37 *)
    Return,         (* 38 *)
    Set,            (* 39 *)
    Then,           (* 40 *)
    To,             (* 41 *)
    Type,           (* 42 *)
    Unqualified,    (* 43 *)
    Until,          (* 44 *)
    Var,            (* 45 *)
    While,          (* 46 *)
    Write,          (* 47 *)
   
  (* Identifiers *)
    StdIdent,       (* 48 *)
    Primitive,      (* 49 *)
  
  (* Literals *)
    RealNumber,     (* 50 *)
    WholeNumber,    (* 51 *)
    CharCode,       (* 52 *)
    QuotedString,   (* 53 *)
    
  (* Punctuation *)
    Comma,          (* 54 *)
    Colon,          (* 55 *)
    Semicolon,      (* 56 *)
    AtSign,         (* 57 *)
    VerticalBar,    (* 58 *)
    DotDot,         (* 59 *)
    Assign,         (* 60 *)
    PlusPlus,       (* 61 *)
    MinusMinus,     (* 62 *)
    DotStar,        (* 63 *)
    
  (* Paired Delimiters *)
    LParen,         (* 64 *)
    RParen,         (* 65 *)
    LBracket,       (* 66 *)
    RBracket,       (* 67 *)
    LBrace,         (* 68 *)
    RBrace,         (* 69 *)
    
  (* Operators *)
  
  (* Non-Resword Level-1 Operators *)
    Equal,          (* 70 *)   (* also used as punctuation *)
    NotEqual,       (* 71 *)
    Less,           (* 72 *)
    LessOrEq,       (* 73 *)
    Greater,        (* 74 *)
    GreaterOrEq,    (* 75 *)
    Identity,       (* 76 *)
   
  (* Non-Resword Level-2 Operators *)
    Plus,           (* 77 *)   (* also used as punctuation *)
    Minus,          (* 78 *)
    Concat,         (* 79 *)
    SetDiff,        (* 80 *)
    
  (* Non-Resword Level-3 Operators *)
    Asterisk,       (* 81 *)   (* also used as punctuation *)
    RealDiv,        (* 82 *)
    
  (* Non-Resword Level-4 Operators *)
   (* none *)
 
  (* Non-Resword Level-5 Operators *)
    TypeConv,       (* 83 *)

  (* Non-Resword Level-6 Operators *)
    Dot,            (* 84 *)   (* also used as punctuation *)
    Deref,          (* 85 *)
    
  (* End Of File Marker *)
    EOF,            (* 86 *)
    
  (* Comments and Pragmas *)
    LineComment,    (* 87 *)
    BlockComment,   (* 88 *)
    Pragma );       (* 89 *)


TYPE TokenT = Token; (* for unqualified use *)


(* Semantic Tokens *)

TYPE Semantic = Token [Invalid..EOF];


(* Functions To Determine Token Classification *)

PROCEDURE isResword ( t : Token ) : BOOLEAN;
 (* Returns TRUE if t is a reserved word, otherwise FALSE. *)

PROCEDURE isIdentifier ( t : Token ) : BOOLEAN;
 (* Returns TRUE if t is an identifier, otherwise FALSE. *)

PROCEDURE isNumber ( t : Token ) : BOOLEAN;
 (* Returns TRUE if t is a number literal, otherwise FALSE. *)

PROCEDURE isCharOrString ( t : Token ) : BOOLEAN;
 (* Returns TRUE if t is a character or string, otherwise FALSE. *)

PROCEDURE isConstExprLiteral ( t : TokenT ) : BOOLEAN;
 (* Returns TRUE if t is a constant expression literal, otherwise FALSE. *)

PROCEDURE isOperL1 ( t : Token ) : BOOLEAN;
 (* Returns TRUE if t is a level-1 operator, otherwise FALSE. *)

PROCEDURE isOperL2 ( t : Token ) : BOOLEAN;
 (* Returns TRUE if t is a level-2 operator, otherwise FALSE. *)

PROCEDURE isOperL3 ( t : Token ) : BOOLEAN;
 (* Returns TRUE if t is a level-3 operator, otherwise FALSE. *)

PROCEDURE isComment ( t : Token ) : BOOLEAN;
 (* Returns TRUE if t is a comment, otherwise FALSE. *)

PROCEDURE isPragma ( t : Token ) : BOOLEAN;
 (* Returns TRUE if t is a pragma, otherwise FALSE. *)

END Token.
