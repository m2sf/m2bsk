(*!m2pim*) (* Copyright (c) 2020 Modula-2 Software Foundation. *)

DEFINITION MODULE CARD64; (* 64-bit Cardinal Type *)


(* ---------------------------------------------------------------------------
 * 64-bit Cardinal Type
 * ---------------------------------------------------------------------------
 *
 *    <-------highBits------>    <-------lowBits------->
 *    63                   32    31                    0
 *   [________LONGINT________]  [________LONGINT________]
 *    ^                     ^    ^                     ^
 *   31                     0   31                     0
 *
 * ------------------------------------------------------------------------ *)

TYPE Card64T = RECORD (* requires 32-bit LONGINT *)
  highBits,
  lowBits : LONGINT
END; (* Card64T *)


(* ---------------------------------------------------------------------------
 * Bit Index Type
 * ------------------------------------------------------------------------ *)

CONST Bitwidth = TSIZE(Card64T) * 8;

TYPE BitIndex = CARDINAL [0..Bitwidth-1];


(* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * NOTE : Not all classic Modula-2 compilers support records as return types
 * of functions.  For  portability,  all functions  that return a result  of
 * type Card64T  are therefore  implemented  as procedures  where the result
 * is passed back in a VAR parameter instead.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *)
 

(* --------------------------------------------------------------------------
 * Procedure:  CARD64.FromCard(result, n)
 * --------------------------------------------------------------------------
 * Passes the Card64T value of CARDINAL n in result.
 * ----------------------------------------------------------------------- *)

PROCEDURE FromCard ( VAR result : Card64T; n : CARDINAL );


(* --------------------------------------------------------------------------
 * Procedure:  CARD64.FromInt(result, i)
 * --------------------------------------------------------------------------
 * Passes the Card64T value of non-negative INTEGER i in result.
 * ----------------------------------------------------------------------- *)

TYPE PosInt = INTEGER [0 .. MAX(INTEGER)];

PROCEDURE FromInt ( VAR result : Card64T; i : PosInt );


(* --------------------------------------------------------------------------
 * Procedure:  CARD64.FromLongInt(result, i)
 * --------------------------------------------------------------------------
 * Passes the Card64T value of non-negative LONGINT i in result.
 * ----------------------------------------------------------------------- *)

TYPE LongPosInt = INTEGER [0 .. MAX(LONGINT)];

PROCEDURE FromLongInt ( VAR result : Card64T; i : LongPosInt );


(* --------------------------------------------------------------------------
 * Procedure:  CARD64.SetZero(result)
 * --------------------------------------------------------------------------
 * Passes the smallest value of type Card64T in result.
 * ----------------------------------------------------------------------- *)

PROCEDURE SetZero ( VAR result : Card64T );


(* --------------------------------------------------------------------------
 * Procedure:  CARD64.SetMax(result)
 * --------------------------------------------------------------------------
 * Passes the largest value of type Card64T in result.
 * ----------------------------------------------------------------------- *)

PROCEDURE SetMax ( VAR result : Card64T );


(* --------------------------------------------------------------------------
 * Function:  CARD64.odd(n)
 * --------------------------------------------------------------------------
 * Returns TRUE if n is odd, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE odd ( n : Card64T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function:  CARD64.eq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n = m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE eq ( n, m : Card64T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * Function:  CARD64.neq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n # m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE neq ( n, m : Card64T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * Function:  CARD64.gt(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n > m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE gt ( n, m : Card64T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * Function:  CARD64.gteq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n >= m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE gteq ( n, m : Card64T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * Function:  CARD64.lt(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n < m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE lt ( n, m : Card64T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * Function:  CARD64.lteq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n <= m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE lteq ( n, m : Card64T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * Procedure:  CARD64.Add(n, m)
 * --------------------------------------------------------------------------
 * Passes the sum n + m back in n.
 * ----------------------------------------------------------------------- *)

PROCEDURE Add ( VAR n, m : Card64T );


(* --------------------------------------------------------------------------
 * Procedure:  CARD64.Sub(n, m)
 * --------------------------------------------------------------------------
 * Passes the difference n - m back in n.
 * ----------------------------------------------------------------------- *)

PROCEDURE Sub ( VAR n, m : Card64T );


(* --------------------------------------------------------------------------
 * Procedure:  CARD64.Mul(n, m)
 * --------------------------------------------------------------------------
 * Passes the product n * m back in n.
 * ----------------------------------------------------------------------- *)

PROCEDURE Mul ( VAR n, m : Card64T );


(* --------------------------------------------------------------------------
 * Procedure:  CARD64.Div(n, m)
 * --------------------------------------------------------------------------
 * Passes the integer division quotient n DIV m back in n.
 * ----------------------------------------------------------------------- *)

PROCEDURE Div ( VAR n, m : Card64T );


(* --------------------------------------------------------------------------
 * Procedure:  CARD64.Mod(n, m)
 * --------------------------------------------------------------------------
 * Passes the integer division modulus n MOD m back in n.
 * ----------------------------------------------------------------------- *)

PROCEDURE Mod ( VAR n, m : Card64T );


(* ---------------------------------------------------------------------------
 * Procedure:  CARD64.Shl( n, shiftFactor )
 * ---------------------------------------------------------------------------
 * Passes n shifted left by shiftFactor back in n.
 * ------------------------------------------------------------------------ *)

PROCEDURE Shl ( VAR n : Card64T; shiftFactor : BitIndex );


(* ---------------------------------------------------------------------------
 * Procedure:  CARD64.Shr( n, shiftFactor )
 * ---------------------------------------------------------------------------
 * Passes n logically shifted right by shiftFactor back in n.
 * ------------------------------------------------------------------------ *)

PROCEDURE Shr ( VAR n : Card64T; shiftFactor : BitIndex );


(* --------------------------------------------------------------------------
 * Function:  CARD64.bit(n, bitIndex)
 * --------------------------------------------------------------------------
 * Returns TRUE if the bit of n at bitIndex is set, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE bit ( n : Card64T; bitIndex : BitIndex ) : BOOLEAN;


(* ---------------------------------------------------------------------------
 * Procedure:  CARD64.SetBit(n, bitIndex)
 * ---------------------------------------------------------------------------
 * Sets the bit of n at bitIndex.
 * ------------------------------------------------------------------------ *)

PROCEDURE SetBit ( VAR n : Card64T; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * Procedure:  CARD64.ClearBit(n, bitIndex)
 * ---------------------------------------------------------------------------
 * Clears the bit of n at bitIndex.
 * ------------------------------------------------------------------------ *)

PROCEDURE ClearBit ( VAR n : Card64T; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * Procedure:  Pow2(n)
 * ---------------------------------------------------------------------------
 * Passes the power of 2 for argument n in result.
 * ------------------------------------------------------------------------ *)

PROCEDURE Pow2 ( VAR result : Card64T; n : BitIndex );


(* ---------------------------------------------------------------------------
 * function ClearHighBit(n)
 * ---------------------------------------------------------------------------
 * Clears the high bit of argument n.
 * ------------------------------------------------------------------------ *)

PROCEDURE ClearHighBit ( VAR n : PCard64T );


(* ---------------------------------------------------------------------------
 * function SetHighBit(n)
 * ---------------------------------------------------------------------------
 * Sets the high bit of argument n.
 * ------------------------------------------------------------------------ *)

PROCEDURE SetHighBit ( VAR n : PCard64T );


END CARD64.