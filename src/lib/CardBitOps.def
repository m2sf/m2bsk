(*!m2pim*) (* Copyright (c) 2020 Modula-2 Software Foundation. *)

DEFINITION MODULE CardBitOps; (* portable *)

(* Bit Operations on Type CARDINAL *)


CONST Bitwidth = TSIZE(CARDINAL) * 8 - 1;

TYPE BitIndex = CARDINAL [0..Bitwidth-1];


(* ---------------------------------------------------------------------------
 * function shl( n, shiftFactor )
 * ---------------------------------------------------------------------------
 * Returns n shifted left by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE shl ( n : CARDINAL; shiftFactor : BitIndex ) : CARDINAL;


(* ---------------------------------------------------------------------------
 * function shr( n, shiftFactor )
 * ---------------------------------------------------------------------------
 * Returns n logically shifted right by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE shr ( n : CARDINAL; shiftFactor : BitIndex ) : CARDINAL;


(* ---------------------------------------------------------------------------
 * function ashr( n, shiftFactor )
 * ---------------------------------------------------------------------------
 * Returns n arithmetically shifted right by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE ashr ( n : CARDINAL; shiftFactor : BitIndex ) : CARDINAL;


(* ---------------------------------------------------------------------------
 * procedure SHLC( n, carryBits, bitIndex )
 * ---------------------------------------------------------------------------
 * Left-shifts n by bitIndex and passes the shifted out bits in carryBits.
 * ------------------------------------------------------------------------ *)

PROCEDURE SHLC ( VAR n, carryBits : CARDINAL; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * function bit( n, bitIndex )
 * ---------------------------------------------------------------------------
 * Returns TRUE if the bit at bitIndex of n is set, otherwise FALSE.
 * ------------------------------------------------------------------------ *)

PROCEDURE bit ( n : CARDINAL; bitIndex : BitIndex ) : CARDINAL;


(* ---------------------------------------------------------------------------
 * procedure SetBit( n, bitIndex )
 * ---------------------------------------------------------------------------
 * Sets the bit at bitIndex of n.
 * ------------------------------------------------------------------------ *)

PROCEDURE SetBit ( VAR n : CARDINAL; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * procedure ClearBit( n, bitIndex )
 * ---------------------------------------------------------------------------
 * Clears the bit at bitIndex of n.
 * ------------------------------------------------------------------------ *)

PROCEDURE ClearBit ( VAR n : CARDINAL; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * procedure ClearLSBtoN( n, bitIndex )
 * ---------------------------------------------------------------------------
 * Clears the bits of n in range [0 .. bitIndex].
 * ------------------------------------------------------------------------ *)

PROCEDURE ClearLSBtoN ( VAR n : CARDINAL; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * procedure ClearMSBtoN( n, bitIndex )
 * ---------------------------------------------------------------------------
 * Clears the bits of n in range [bitIndex .. Bitwidth-1].
 * ------------------------------------------------------------------------ *)

PROCEDURE ClearMSBtoN ( VAR n : CARDINAL; bitIndex : BitIndex );


END CardBitOps.