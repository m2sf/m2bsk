(*!m2pim*) (* Copyright (c) 2020 Modula-2 Software Foundation. *)

DEFINITION MODULE SCARD32; (* Simulated 32-bit Cardinal *)

(* This library provides CARDINAL semantics for type LONGINT *)
  

TYPE SCard32T = LONGINT; (* requires 32-bit LONGINT *)

TYPE BitIndex = CARDINAL [0..31];


(* --------------------------------------------------------------------------
 * function fromCard(n)
 * --------------------------------------------------------------------------
 * Returns the SCard32T value of CARDINAL n.
 * ----------------------------------------------------------------------- *)

PROCEDURE fromCard ( n : CARDINAL ) : SCard32T;


(* --------------------------------------------------------------------------
 * function fromInt(i)
 * --------------------------------------------------------------------------
 * Returns the SCard32T value of non-negative INTEGER i.
 * ----------------------------------------------------------------------- *)

TYPE PosInt = INTEGER [0 .. MAX(INTEGER)];

PROCEDURE fromInt ( i : PosInt ) : SCard32T;


(* --------------------------------------------------------------------------
 * function fromLongInt(i)
 * --------------------------------------------------------------------------
 * Returns the SCard32T value of non-negative LONGINT i.
 * ----------------------------------------------------------------------- *)

TYPE LongPosInt = INTEGER [0 .. MAX(LONGINT)];

PROCEDURE fromLongInt ( i : LongPosInt ) : SCard32T;


(* --------------------------------------------------------------------------
 * function max(n)
 * --------------------------------------------------------------------------
 * Returns the largest value of type SCard32T.
 * ----------------------------------------------------------------------- *)

PROCEDURE max : SCard32T;


(* --------------------------------------------------------------------------
 * function min(n)
 * --------------------------------------------------------------------------
 * Returns the smallest value of type SCard32T.
 * ----------------------------------------------------------------------- *)

PROCEDURE min : SCard32T;


(* --------------------------------------------------------------------------
 * function odd(n)
 * --------------------------------------------------------------------------
 * Returns TRUE if n is odd, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE odd ( n : SCard32T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function eq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n = m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE eq ( n, m : SCard32T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function neq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n # m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE neq ( n, m : SCard32T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function gt(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n > m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE gt ( n, m : SCard32T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function gteq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n >= m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE gteq ( n, m : SCard32T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function lt(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n < m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE lt ( n, m : SCard32T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function lteq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n <= m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE lteq ( n, m : SCard32T ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function sum(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n + m.
 * ----------------------------------------------------------------------- *)

PROCEDURE sum ( n, m : SCard32T ) : SCard32T;


(* --------------------------------------------------------------------------
 * function diff(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n - m.
 * ----------------------------------------------------------------------- *)

PROCEDURE diff ( n, m : SCard32T ) : SCard32T;


(* --------------------------------------------------------------------------
 * function mul(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n * m.
 * ----------------------------------------------------------------------- *)

PROCEDURE mul ( n, m : SCard32T ) : SCard32T;


(* --------------------------------------------------------------------------
 * function div(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n DIV m.
 * ----------------------------------------------------------------------- *)

PROCEDURE div ( n, m : SCard32T ) : SCard32T;


(* --------------------------------------------------------------------------
 * function mod(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n MOD m.
 * ----------------------------------------------------------------------- *)

PROCEDURE mod ( n, m : SCard32T ) : SCard32T;


(* ---------------------------------------------------------------------------
 * function shl( n, shiftFactor )
 * ---------------------------------------------------------------------------
 * Returns the value of n shifted left by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE shl ( n : SCard32T; shiftFactor : BitIndex ) : SCard32T;


(* ---------------------------------------------------------------------------
 * function shr( n, shiftFactor )
 * ---------------------------------------------------------------------------
 * Returns the value of n shifted right by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE shr ( n : SCard32T; shiftFactor : BitIndex ) : SCard32T;


(* ---------------------------------------------------------------------------
 * function pow2(n)
 * ---------------------------------------------------------------------------
 * Returns the power of 2 for argument n.
 * ------------------------------------------------------------------------ *)

PROCEDURE pow2 ( n : BitIndex ) : SCard32T;


END SCARD32.