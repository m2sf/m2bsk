(*!m2pim*) (* Copyright (c) 2020 Modula-2 Software Foundation. *)

DEFINITION MODULE IntBitOps; (* portable *)

(* Bit Operations on Type INTEGER *)


CONST Bitwidth = TSIZE(INTEGER) * 8 - 1;

TYPE BitIndex = CARDINAL [0..Bitwidth-1];


(* ---------------------------------------------------------------------------
 * function shl( i, shiftFactor )
 * ---------------------------------------------------------------------------
 * Returns i shifted left by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE shl ( i : INTEGER; shiftFactor : BitIndex ) : INTEGER;


(* ---------------------------------------------------------------------------
 * function shr( i, shiftFactor )
 * ---------------------------------------------------------------------------
 * Returns i logically shifted right by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE shr ( i : INTEGER; shiftFactor : BitIndex ) : INTEGER;


(* ---------------------------------------------------------------------------
 * function ashr( i, shiftFactor )
 * ---------------------------------------------------------------------------
 * Returns i arithmetically shifted right by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE ashr ( i : INTEGER; shiftFactor : BitIndex ) : INTEGER;


(* ---------------------------------------------------------------------------
 * procedure SHLC( i, carryBits, bitIndex )
 * ---------------------------------------------------------------------------
 * Left-shifts i by bitIndex and passes the shifted out bits in carryBits.
 * ------------------------------------------------------------------------ *)

PROCEDURE SHLC ( VAR i, carryBits : INTEGER; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * function bit( i, bitIndex )
 * ---------------------------------------------------------------------------
 * Returns TRUE if the bit at bitIndex of i is set, otherwise FALSE.
 * ------------------------------------------------------------------------ *)

PROCEDURE bit ( i : INTEGER; bitIndex : BitIndex ) : INTEGER;


(* ---------------------------------------------------------------------------
 * procedure SetBit( i, bitIndex )
 * ---------------------------------------------------------------------------
 * Sets the bit at bitIndex of i.
 * ------------------------------------------------------------------------ *)

PROCEDURE SetBit ( VAR i : INTEGER; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * procedure ClearBit( i, bitIndex )
 * ---------------------------------------------------------------------------
 * Clears the bit at bitIndex of i.
 * ------------------------------------------------------------------------ *)

PROCEDURE ClearBit ( VAR i : INTEGER; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * procedure ClearLSBtoN( i, bitIndex )
 * ---------------------------------------------------------------------------
 * Clears the bits of i in range [0 .. bitIndex].
 * ------------------------------------------------------------------------ *)

PROCEDURE ClearLSBtoN ( VAR i : INTEGER; bitIndex : BitIndex );


(* ---------------------------------------------------------------------------
 * procedure ClearMSBtoN( i, bitIndex )
 * ---------------------------------------------------------------------------
 * Clears the bits of i in range [bitIndex .. Bitwidth-1].
 * ------------------------------------------------------------------------ *)

PROCEDURE ClearMSBtoN ( VAR i : INTEGER; bitIndex : BitIndex );


END IntBitOps.