(*!m2pim*) (* Copyright (c) 2017 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE LongIntMath;

(* Long Integer Math library *)

FROM UnsignedInt IMPORT ULONGINT; (* 0..MAX(LONGINT) *)


(* --------------------------------------------------------------------------
 * Long Integer Division Operations
 * --------------------------------------------------------------------------
 * There are several different definitions for integer division all of which
 * produce different results when at least one of the operands is negative.
 * Commonly used variants are truncated, floored and rounded division.
 *
 * Truncated integer division, defined as
 *   q = trunc(i/j)
 *
 * Floored integer division, defined as
 *   q = floor(i/j)
 *
 * Rounded integer division, defined as
 *   q = round(i/j)
 *
 * The respective definitions of the modulus operation are derived from the
 * definitions for integer division to satisfy the division rule (2) of the
 * Euclidean theorem:
 *
 * (1) there exists a whole number q, where
 * (2) i = j * q + r, and
 * (3) 0 <= r < | j |
 *
 * In a seminal paper (Boute, 1992), Raymond T. Boute at the University of
 * Nijmegen proposed a mathematically more correct and useful definition.
 * It is defined to satisfy all three conditions of the Euclidean theorem.
 *
 * Euclidean integer division, defined as
 *   i = j * div(i, j) + mod(i, j) and 0 <= mod(i, j) < abs(j)
 *
 * Different editions of PIM Modula-2 have used variants of truncated and
 * floored integer division for DIV and MOD. It is therefore impossible to
 * write portable code across different PIM implementations when using DIV
 * and MOD where at least one of the operands may be negative.
 *
 * For portability, this library provides three pairs of div/mod functions.
 * o  ediv() and emod() following the Euclidean definition
 * o  fdiv() and fmod() following the floored division definition
 * o  tdiv() and tmod() following the truncated division definition
 *
 * for i>=0 and j>0
 *   ediv(), fdiv() and tdiv() return the same results,
 *   emod(), fmod() and tmod() return the same results.
 * 
 * for i>=0 and j<0
 *   ediv() and fdiv() return the same results,
 *   emod() and fmod() return the same results.
 * 
 * for i<0 and j>0
 *   ediv() and tdiv() return the same results,
 *   emod() and tmod() return the same results.
 *
 * for i<0 and j<0
 *   fdiv() and tdiv() return the same results,
 *   fmod() and tmod() return the same results.
 *
 * [Boute, 1992] Raymond T. Boute, "The Euclidean Definition of the Functions
 *  div and mod", ACM Transactions on Programming Languages, Vol.14, No.2,
 *  April, 1992.
 * ----------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------
 * function ediv(i)
 * --------------------------------------------------------------------------
 * Returns the quotient q of euclidean division i by j.
 * ----------------------------------------------------------------------- *)

PROCEDURE ediv ( i, j : LONGINT ) : LONGINT;


(* --------------------------------------------------------------------------
 * function emod(i)
 * --------------------------------------------------------------------------
 * Returns the remainder r of euclidean division i by j.
 * ----------------------------------------------------------------------- *)

PROCEDURE emod ( i, j : LONGINT ) : LONGINT;


(* --------------------------------------------------------------------------
 * function fdiv(i)
 * --------------------------------------------------------------------------
 * Returns the quotient q of floored division i by j.
 * ----------------------------------------------------------------------- *)

PROCEDURE fdiv ( i, j : LONGINT ) : LONGINT;


(* --------------------------------------------------------------------------
 * function fmod(i)
 * --------------------------------------------------------------------------
 * Returns the remainder r of floored division i by j.
 * ----------------------------------------------------------------------- *)

PROCEDURE fmod ( i, j : LONGINT ) : LONGINT;


(* --------------------------------------------------------------------------
 * function tdiv(i)
 * --------------------------------------------------------------------------
 * Returns the quotient q of truncated division i by j.
 * ----------------------------------------------------------------------- *)

PROCEDURE tdiv ( i, j : LONGINT ) : LONGINT;


(* --------------------------------------------------------------------------
 * function tmod(i)
 * --------------------------------------------------------------------------
 * Returns the remainder r of truncated division i by j.
 * ----------------------------------------------------------------------- *)

PROCEDURE tmod ( i, j : LONGINT ) : LONGINT;


(* --------------------------------------------------------------------------
 * Long Integer Exponentiation and Logarithm Operations
 * ----------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------
 * function intPow2(i)
 * --------------------------------------------------------------------------
 * Returns the power of 2 for argument i
 * ----------------------------------------------------------------------- *)

PROCEDURE longIntPow2 ( i : ULONGINT ) : LONGINT;


(* --------------------------------------------------------------------------
 * function intLog2(i)
 * --------------------------------------------------------------------------
 * Returns the integral part of the logarithm of 2 for argument i
 * ----------------------------------------------------------------------- *)

PROCEDURE longIntLog2 ( i : ULONGINT ) : LONGINT;


(* --------------------------------------------------------------------------
 * function intPow10(i)
 * --------------------------------------------------------------------------
 * Returns the power of 10 for argument i
 * ----------------------------------------------------------------------- *)

PROCEDURE longIntPow10 ( i : ULONGINT ) : LONGINT;


(* --------------------------------------------------------------------------
 * function intLog10(i)
 * --------------------------------------------------------------------------
 * Returns the integral part of the logarithm of 10 for argument i
 * ----------------------------------------------------------------------- *)

PROCEDURE longIntLog10 ( i : ULONGINT ) : LONGINT;


END LongIntMath.