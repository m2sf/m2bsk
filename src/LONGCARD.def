(*!m2pim*) (* Copyright (c) 2017 B.Kowarsch. All rights reserved. *)

DEFINITION MODULE LONGCARD;

(* Long Cardinal Type with twice the bitwidth of CARDINAL *)

FROM SYSTEM IMPORT TSIZE;


(* Bitwidth of LONGCARD *)

CONST Bitwidth = TSIZE(CARDINAL) * 2;


(* Type LONGCARD *)

TYPE LONGCARD = RECORD
  highBits,
  lowBits   : CARDINAL
END; (* LONGCARD *)

TYPE LongCardT = LONGCARD; (* for unqualified use *)


(* --------------------------------------------------------------------------
 * function fromCard(n)
 * --------------------------------------------------------------------------
 * Returns the LONGCARD value of CARDINAL n.
 * ----------------------------------------------------------------------- *)

PROCEDURE fromCard ( n : CARDINAL ) : LONGCARD;


(* --------------------------------------------------------------------------
 * function fromInt(i)
 * --------------------------------------------------------------------------
 * Returns the LONGCARD value of non-negative INTEGER i.
 * ----------------------------------------------------------------------- *)

TYPE Int0ToMaxInt = INTEGER [0..MAX(INTEGER)];

PROCEDURE fromInt ( i : Int0ToMaxInt ) : LONGCARD;


(* --------------------------------------------------------------------------
 * function fromLongInt(i)
 * --------------------------------------------------------------------------
 * Returns the LONGCARD value of non-negative LONGINT i.
 * ----------------------------------------------------------------------- *)

TYPE LongInt0ToMaxLongInt = LONGINT [0..MAX(LONGINT)];

PROCEDURE fromLongInt ( i : LongInt0ToMaxLongInt ) : LONGCARD;


(* --------------------------------------------------------------------------
 * function max(n)
 * --------------------------------------------------------------------------
 * Returns the largest value of type LONGCARD.
 * ----------------------------------------------------------------------- *)

PROCEDURE max ( ) : LONGCARD;


(* --------------------------------------------------------------------------
 * function min(n)
 * --------------------------------------------------------------------------
 * Returns the smallest value of type LONGCARD.
 * ----------------------------------------------------------------------- *)

PROCEDURE min ( ) : LONGCARD;


(* --------------------------------------------------------------------------
 * function odd(n)
 * --------------------------------------------------------------------------
 * Returns TRUE if n is odd, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE odd ( n : LONGCARD ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function eq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n = m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE eq ( n, m : LONGCARD ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function neq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n # m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE neq ( n, m : LONGCARD ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function gt(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n > m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE gt ( n, m : LONGCARD ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function gteq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n >= m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE gteq ( n, m : LONGCARD ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function lt(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n < m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE lt ( n, m : LONGCARD ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function lteq(n, m)
 * --------------------------------------------------------------------------
 * Returns TRUE if n <= m, otherwise FALSE.
 * ----------------------------------------------------------------------- *)

PROCEDURE lteq ( n, m : LONGCARD ) : BOOLEAN;


(* --------------------------------------------------------------------------
 * function sum(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n + m.
 * ----------------------------------------------------------------------- *)

PROCEDURE sum ( n, m : LONGCARD ) : LONGCARD;


(* --------------------------------------------------------------------------
 * function diff(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n - m.
 * ----------------------------------------------------------------------- *)

PROCEDURE diff ( n, m : LONGCARD ) : LONGCARD;


(* --------------------------------------------------------------------------
 * function mul(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n * m.
 * ----------------------------------------------------------------------- *)

PROCEDURE mul ( n, m : LONGCARD ) : LONGCARD;


(* --------------------------------------------------------------------------
 * function div(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n DIV m.
 * ----------------------------------------------------------------------- *)

PROCEDURE div ( n, m : LONGCARD ) : LONGCARD;


(* --------------------------------------------------------------------------
 * function mod(n, m)
 * --------------------------------------------------------------------------
 * Returns the value of n MOD m.
 * ----------------------------------------------------------------------- *)

PROCEDURE mod ( n, m : LONGCARD ) : LONGCARD;


(* ---------------------------------------------------------------------------
 * function shl(n, shiftFactor)
 * ---------------------------------------------------------------------------
 * Returns the value of n shifted left by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE shl ( n : LONGCARD; shiftFactor : CARDINAL ) : LONGCARD;


(* ---------------------------------------------------------------------------
 * function shr(n, shiftFactor)
 * ---------------------------------------------------------------------------
 * Returns the value of n shifted right by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE shr ( n : LONGCARD; shiftFactor : CARDINAL ) : LONGCARD;


(* --------------------------------------------------------------------------
 * procedure ADD(n, m, carry)
 * --------------------------------------------------------------------------
 * Adds m to n. If overflow occurs, one is passed in carry, else zero.
 * ----------------------------------------------------------------------- *)

PROCEDURE ADD ( VAR n : LONGCARD; m : LONGCARD; VAR carry : CARDINAL );


(* ---------------------------------------------------------------------------
 * procedure SHL(n, shiftFactor)
 * ---------------------------------------------------------------------------
 * Shifts n left by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE SHL ( VAR n : LONGCARD; shiftFactor : CARDINAL );


(* ---------------------------------------------------------------------------
 * procedure SHR(n, shiftFactor)
 * ---------------------------------------------------------------------------
 * Shifts n right by shiftFactor.
 * ------------------------------------------------------------------------ *)

PROCEDURE SHR ( VAR n : LONGCARD; shiftFactor : CARDINAL );


END LONGCARD.