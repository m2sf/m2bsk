FOLLOW Sets for Modula-2 R10 Bootstrap Kernel

compilationUnit =
  { EOF };
  
definitionModule =
  { EOF };
  
import =
  { FIRST(import),
    FIRST(definition),
    END };
  
definition =
  { FIRST(definition),
    END };
  
constDefinition =
  { Semicolon };
  
simpleConstDefinition =
  { Semicolon };
  
typeDefinition =
  { Semicolon };
  
aliasType =
  { FOLLOW(typeDefinition) };
  
typeIdent =
  { Semicolon,
    Equals,
    FOLLOW(typeDefinition),
    FOLLOW(fieldList),
    Comma,
    RightParen,
    END,
    DO,
    FOLLOW(factor) };
  
qualident =
  { FOLLOW(typeIdent),
    FOLLOW(nameSelector),
    DotStar };
      
derivedType =
  { FOLLOW(typeDefinition) };

subrangeType =
  { FOLLOW(typeDefinition),
    FOLLOW(fieldList),
    FOLLOW(varDeclaration) };

range =
  { OF };

enumType =
  { FOLLOW(typeDefinition) };
  
identList =
  { Colon,
    RightParen };
  
setType =
  { FOLLOW(typeDefinition) };
  
arrayType =
  { FOLLOW(typeDefinition),
    FOLLOW(fieldList),
    FOLLOW(varDeclaration) };
  
recordType =
  { FOLLOW(typeDefinition) };
  
recTypeToExtend =
  { RightParen };
  
fieldList =
  { Semicolon,
    END };
  
pointerType =
  { FOLLOW(typeDefinition) };

procedureType =
  { FOLLOW(typeDefinition),
    FOLLOW(fieldList),
    FOLLOW(varDeclaration) };
  
formalType =
  { Semicolon,
    RightParen };
  
nonAttrFormalType =
  { FOLLOW(formalType),
    FOLLOW(formalParams) };
  
simpleFormalType =
  { FOLLOW(nonAttrFormalType),
    FOLLOW(variadicFormalType) };
  
castingFormalType =
  { FOLLOW(nonAttrFormalType) };
  
variadicFormalType =
  { FOLLOW(nonAttrFormalType) };
  
procedureHeader =
  { Semicolon };
  
bindingSpecifier =
  { RightBracket };
  
bindableIdent =
  { RightBracket };
  
procedureSignature =
  { FOLLOW(procedureHeader) };
  
formalParams =
  { RightParen,
    Semicolon };
  
programModule =
  { EOF };
  
privateImport =
  { IMPORT,
    BEGIN,
    END };
  
block =
  { StdIdent };
  
implementationModule =
  { EOF };
  
possiblyEmptyBlock =
  { StdIdent };
  
declaration =
  { FIRST(declaration),
    BEGIN,
    END };
  
constDeclaration =
  { Semicolon };
  
typeDeclaration =
  { Semicolon };
  
pointerOrIndeterminateType =
  { FOLLOW(typeDeclaration) };
  
indeterminateTarget =
  { FOLLOW(typeDeclaration) };
  
indeterminateField =
  { END };
  
varDeclaration =
  { Semicolon };
  
aliasDeclaration =
  { Semicolon };
  
nameSelector =
  { FOLLOW(aliasDeclaration),
    Comma };
  
statementSequence =
  { ELSIF,
    ELSE,
    END,
    FOLLOW(case),
    UNTIL };
  
statement =
  { Semicolon,
    FOLLOW(statementSequence) };
  
memMgtOperation =
  { FOLLOW(statement) };
  
newStatement =
  { FOLLOW(statement) };
  
retainStatement =
  { FOLLOW(statement) };
  
releaseStatement =
  { FOLLOW(statement) };
  
updateOrProcCall =
  { FOLLOW(statement) };
  
returnStatement =
  { FOLLOW(statement) };
  
copyStatement =
  { FOLLOW(statement) };
  
readStatement =
  { FOLLOW(statement) };
  
writeStatement =
  { FOLLOW(statement) };
  
inputArg =
  { FOLLOW(statement),
    Comma };
  
outputArgs =
  { FOLLOW(statement),
    Comma };
  
formattedArgs =
  { FOLLOW(statement),
    Comma };
  
ifStatement =
  { FOLLOW(statement) };
  
caseStatement =
  { FOLLOW(statement) };
  
case =
  { VerticalBar,
    ELSE,
    END };
  
caseLabels =
  { Comma,
    Colon };
  
loopStatement =
  { FOLLOW(statement) };

whileStatement =
  { FOLLOW(statement) };

repeatStatement =
  { FOLLOW(statement) };

forStatement =
  { FOLLOW(statement) };
  
forLoopVariants =
  { IN };
  
iterableExpr =
  { DO };
  
ordinalRange =
  { OF };
  
designator =
  { Assign,
    StdIdent=CAPACITY,
    FOLLOW(statement),
    Colon,
    FOLLOW(inputArg),
    FOLLOW(iterableExpr),
    LeftParen,
    FOLLOW(simpleFactor) };
  
designatorTail =
  { FOLLOW(designator) };
  
subscriptOrSlice =
  { FOLLOW(designatorTail) };
  
targetDesignator =
  { PlusPlus,
    MinusMinus,
    Assign,
    LeftParen,
    FOLLOW(statement) };
  
targetDesignatorTail =
  { FOLLOW(targetDesignator) };
  
subscriptOrSliceOrInsert =
  { FOLLOW(targetDesignatorTail) };
  
fieldSelector =
  { FIRST(designatorTail),
    FOLLOW(designatorTail),
    FIRST(targetDesignatorTail),
    FOLLOW(targetDesignatorTail) };
  
expressionList =
  { RightParen };
  
expression =
  { FOLLOW(constDefinition),
    DotDot,
    RightBracket,
    OF,
    FOLLOW(constDeclaration),
    FOLLOW(newStatement),
    FOLLOW(updateOrProcCall),
    FOLLOW(returnStatement),
    FOLLOW(copyStatement),
    FOLLOW(writeStatement),
    Comma,
    THEN,
    OF,
    Colon,
    DO,
    FOLLOW(repeatStatement),
    FOLLOW(expressionList),
    RightParen,
    RightBrace };
  
simpleExpression =
  { Equals,
    Octothorpe,
    Less,
    LessEqual,
    Greater,
    GreaterEqual,
    Identity,
    IN,
    FOLLOW(expression) };
  
term =
  { Plus,
    Minus,
    OR,
    Ampersand,
    SetDiff,
    FOLLOW(simpleExpression) };
  
simpleTerm =
  { Asterisk,
    Slash,
    DIV,
    MOD,
    AND,
    FOLLOW(term) };
  
factor =
  { FOLLOW(simpleExpression),
    FOLLOW(simpleTerm) };
  
simpleFactor =
  { TypeConv,
    FOLLOW(factor) };
  
designatorOrFuncCall =
  { FOLLOW(simpleFactor) };
  
structuredValue =
  { FOLLOW(simpleFactor) };

valueComponent =
  { Comma,
    RightBrace };

toDoList =
  { Semicolon,
    FOLLOW(statement) };
  
trackingRef =
  { StringLiteral };
  
taskToDo =
  { Semicolon,
    END };
  
END OF FILE
